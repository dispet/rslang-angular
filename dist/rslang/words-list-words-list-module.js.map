{"version":3,"sources":["./src/app/words-list/words-list.component.ts","./src/app/words-list/words-list.component.html","./src/app/words-list/words-list-routing.module.ts","./src/app/settings/settings.component.ts","./src/app/settings/settings.component.html","./src/app/settings/index.ts","./src/app/words-list/words-list.module.ts"],"names":[],"mappings":"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","file":"words-list-words-list-module.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { EMPTY, Subject } from 'rxjs';\nimport { first, switchMap, takeUntil } from 'rxjs/operators';\nimport { SettingsFacade } from '../state/settings-facade.service';\nimport { FacadeService } from '../state';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DATA_URL, GAMES_NAME } from '../shared/constants/';\nimport { playAudio } from '../shared/utils';\n\n@Component({\n  selector: 'app-words-list',\n  templateUrl: './words-list.component.html',\n  styleUrls: ['./words-list.component.scss'],\n})\nexport class WordsListComponent implements OnInit, OnDestroy {\n  constructor(\n    private stateFacade: FacadeService,\n    private settingsFacade: SettingsFacade,\n    private route: ActivatedRoute,\n    private router: Router,\n  ) {}\n\n  isTranslationDisplay$ = this.settingsFacade.isTranslationDisplay$;\n  isControlsDisplay$ = this.settingsFacade.isControlsDisplay$;\n  listWords$ = this.stateFacade.listWords$;\n  userWords$ = this.stateFacade.userWords$;\n  pagination$ = this.stateFacade.pagination$;\n  userStatistics$ = this.stateFacade.userStatistics$;\n  isLoading$ = this.stateFacade.isLoading$;\n  url = DATA_URL;\n  private destroy$ = new Subject<void>();\n  gamesName = GAMES_NAME;\n  group: number;\n  page: number;\n\n  readonly groupsAmount: Array<number> = [1, 2, 3, 4, 5, 6];\n\n  readonly MAX_GROUP_COUNT = 6;\n  readonly MIN_GROUP_COUNT = 1;\n  readonly MAX_PAGE_COUNT = 30;\n  readonly MIN_PAGE_COUNT = 1;\n\n  ngOnInit(): void {\n    this.loadDataFromRoute('list');\n    this.loadUserWords();\n    this.loadUserSettings();\n    this.loadUserStatistics();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  pickGroup(group: number): void {\n    this.router.navigate(['words-list', group, 1]);\n  }\n\n  isFirstPage(): boolean {\n    return +this.page === this.MIN_PAGE_COUNT;\n  }\n\n  isLastPage(): boolean {\n    return +this.page === this.MAX_PAGE_COUNT;\n  }\n\n  nextPage(): void {\n    if (!this.isLastPage()) {\n      this.router.navigate(['words-list', this.group, +this.page + 1]);\n    }\n  }\n\n  prevPage(): void {\n    if (!this.isFirstPage()) {\n      this.router.navigate(['words-list', this.group, +this.page - 1]);\n    }\n  }\n\n  firstPage(): void {\n    this.router.navigate(['words-list', this.group, this.MIN_PAGE_COUNT]);\n  }\n\n  lastPage(): void {\n    this.router.navigate(['words-list', this.group, this.MAX_PAGE_COUNT]);\n  }\n\n  setRouteValuesInWrongCase() {\n    this.router.navigate(['words-list', this.MIN_GROUP_COUNT, this.MIN_PAGE_COUNT]);\n  }\n\n  convertToNum(value: string) {\n    return parseInt(value.trim());\n  }\n\n  isCorrectPassedGroupAndPage(group: string, page: string): boolean {\n    const isCorrectGroup = !isNaN(this.convertToNum(group)) ? this.checkGroupRange(group) : false;\n    const isCorrectPage = !isNaN(this.convertToNum(page)) ? this.checkPageRange(page) : false;\n    if(isCorrectGroup && isCorrectPage) return true;\n    return false;\n  }\n\n  checkGroupRange(group: string): boolean {\n    const groupNum = this.convertToNum(group);\n    return (groupNum >= this.MIN_GROUP_COUNT) && (groupNum <= this.MAX_GROUP_COUNT);\n  }\n\n  checkPageRange(page: string): boolean {\n    const pageNum = this.convertToNum(page);\n    return (pageNum >= this.MIN_PAGE_COUNT) && (pageNum <= this.MAX_PAGE_COUNT);\n  }\n\n\n  loadDataFromRoute(direction: string) {\n    this.route.params.pipe(switchMap((params) => {\n      if(this.isCorrectPassedGroupAndPage(params['group'], params['page'])) {\n        this.group = params['group'];\n        this.page = params['page'];\n        return this.stateFacade.loadListWords(this.group, this.page, direction);\n      } else {\n        this.setRouteValuesInWrongCase();\n        return EMPTY;\n      }\n    }), takeUntil(this.destroy$)).subscribe();\n  }\n\n  loadUserWords() {\n    this.stateFacade.loadUserWords().pipe(first()).subscribe();\n  }\n\n  loadUserSettings() {\n    this.settingsFacade.loadUserSettings();\n  }\n\n  loadUserStatistics() {\n    this.stateFacade.loadUserStatistics().pipe(first()).subscribe();\n  }\n\n  addToHard(id: string): void {\n    this.stateFacade.addWordToHard(id);\n    this.loadUserWords();\n  }\n\n  addToDeleted(id: string): void {\n    this.stateFacade.addWordToDeleted(id);\n    this.loadUserWords();\n  }\n\n  playAudio(url1: string, url2: string, url3: string) {\n    playAudio(this.url, url1, url2, url3);\n  }\n\n  goGame(gameName: string) {\n    if (gameName === 'savanna') {\n      this.router.navigate(['/mini-games/savanna']);\n      return;\n    }\n    this.router.navigate(['/mini-games', gameName, this.group, this.page]);\n  }\n}\n","<div class=\"actions\">\n  <button type=\"button\" mat-button (click)=\"drawer.toggle()\">Выбрать игру</button>\n\n  <mat-button-toggle-group class=\"actions-group\">\n    <mat-button-toggle *ngFor=\"let group of groupsAmount\" (click)=\"pickGroup(group)\">{{ group }}</mat-button-toggle>\n  </mat-button-toggle-group>\n\n  <button class=\"settings\" mat-icon-button routerLink=\"/words-list/settings\">\n    <mat-icon mat-list-icon>settings</mat-icon>\n  </button>\n</div>\n\n<mat-drawer-container>\n  <mat-drawer #drawer position=\"end\">\n    <mat-button-toggle-group vertical>\n      <mat-button-toggle *ngFor=\"let game of gamesName\" (click)=\"goGame(game.name)\">{{ game.label }}</mat-button-toggle>\n    </mat-button-toggle-group>\n  </mat-drawer>\n\n  <ng-template #content>\n    <ul class=\"list\">\n      <li *ngFor=\"let item of listWords$ | async\" class=\"list-item\">\n        <div class=\"list-item-container\">\n          <div class=\"item-image\">\n            <img src=\"{{ url }}/{{ item.image }}\" alt=\"{{ item.word }}\" />\n          </div>\n          <div class=\"item-content\">\n            <div class=\"item-title\">\n              <button mat-icon-button (click)=\"playAudio(item.audio, item.audioMeaning, item.audioExample)\">\n                <mat-icon mat-list-icon>volume_up</mat-icon>\n              </button>\n              <span>\n                {{ item.word }}\n              </span>\n              <span>: {{ item.transcription }}</span>\n              <span *ngIf=\"isTranslationDisplay$ | async\"> - {{ item.wordTranslate }}</span>\n            </div>\n            <div class=\"item-description\">\n              <p>\n                <span [innerHTML]=\"item.textMeaning\"></span>\n                <span *ngIf=\"isTranslationDisplay$ | async\"> - {{ item.textMeaningTranslate }}</span>\n              </p>\n              <p>\n                <span [innerHTML]=\"item.textExample\"></span>\n                <span *ngIf=\"isTranslationDisplay$ | async\"> - {{ item.textExampleTranslate }}</span>\n              </p>\n              <p>\n                {{ item.learningResults }}\n              </p>\n            </div>\n          </div>\n\n          <div class=\"item-controls\" *ngIf=\"isControlsDisplay$ | async\">\n            <button (click)=\"addToHard(item.id)\">\n              <mat-icon>new_label</mat-icon>\n            </button>\n            <button (click)=\"addToDeleted(item.id)\">\n              <mat-icon>delete</mat-icon>\n            </button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n      </li>\n    </ul>\n  </ng-template>\n\n  <mat-spinner *ngIf=\"isLoading$ | async; else content\"></mat-spinner>\n\n  <div class=\"paginator\">\n    <mat-button-toggle-group>\n      <mat-button-toggle (click)=\"firstPage()\">\n        <mat-icon mat-list-icon>first_page</mat-icon>\n      </mat-button-toggle>\n\n      <mat-button-toggle (click)=\"prevPage()\" [disabled]=\"isFirstPage()\">\n        <mat-icon mat-list-icon>chevron_left</mat-icon>\n      </mat-button-toggle>\n\n      <div class=\"current-page\" *ngIf=\"pagination$ | async as pagination\">\n        <b>{{ page }} / 30</b>\n      </div>\n\n      <mat-button-toggle (click)=\"nextPage()\" [disabled]=\"isLastPage()\">\n        <mat-icon mat-list-icon>chevron_right</mat-icon>\n      </mat-button-toggle>\n\n      <mat-button-toggle (click)=\"lastPage()\">\n        <mat-icon mat-list-icon>last_page</mat-icon>\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n</mat-drawer-container>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SettingsComponent } from '../settings';\nimport { WordsListComponent } from './words-list.component';\n\nconst routes: Routes = [\n  { path: 'settings', component: SettingsComponent },\n  { path: ':group/:page', component: WordsListComponent },\n  { path: '', redirectTo: '1/1', pathMatch: 'full' },\n];\n\n@NgModule({\n  declarations: [],\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class WordsListRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SettingsFacade } from '../state/settings-facade.service';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n})\nexport class SettingsComponent implements OnInit {\n  isTranslationDisplay$ = this.settingsFacade.isTranslationDisplay$;\n  isControlsDisplay$ = this.settingsFacade.isControlsDisplay$;\n  settings$: Observable<any>;\n\n  constructor(private settingsFacade: SettingsFacade, private location: Location) {}\n\n  ngOnInit(): void {\n    this.settings$ = combineLatest([this.isTranslationDisplay$, this.isControlsDisplay$]).pipe(\n      map(([translation, controls]) => {\n        return { translation, controls };\n      }),\n    );\n  }\n\n  changeTranslationDisplay() {\n    this.settingsFacade.changeTranslateSetting();\n  }\n\n  changeControlsDisplay() {\n    this.settingsFacade.changeControlsSetting();\n  }\n\n  backToPreviousPage() {\n    this.location.back();\n  }\n}\n","<div class=\"settings\">\n  <div class=\"back-button\">\n    <button (click)=\"backToPreviousPage()\">\n      <mat-icon>arrow_back</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"controls\" *ngIf=\"settings$ | async as settings\">\n    <h2 class=\"controls-title\">Настройки</h2>\n\n    <mat-card class=\"control-translation\">\n      <mat-card-content>\n        <h3 class=\"translation-subtitle\">Хочу смотреть перевод</h3>\n\n        <section class=\"slider-section\">\n          <mat-slide-toggle\n            class=\"slider-margin\"\n            color=\"primary\"\n            (toggleChange)=\"changeTranslationDisplay()\"\n            [checked]=\"settings.translation\"\n          >\n            <span *ngIf=\"settings.translation; else no\">Да</span>\n            <ng-template #no><span>Нет</span></ng-template>\n          </mat-slide-toggle>\n        </section>\n      </mat-card-content>\n    </mat-card>\n\n    <mat-divider></mat-divider>\n\n    <mat-card class=\"control-buttons\">\n      <mat-card-content>\n        <h3 class=\"buttons-subtitle\">Хочу добавлять слова в \"Сложные\" \"Удаленные\"</h3>\n\n        <section class=\"slider-section\">\n          <mat-slide-toggle class=\"slider-margin\" color=\"primary\" [checked]=\"settings.controls\" (toggleChange)=\"changeControlsDisplay()\">\n            <span *ngIf=\"settings.controls; else no\">Да</span>\n            <ng-template #no><span>Нет</span></ng-template>\n          </mat-slide-toggle>\n        </section>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","export * from './settings.component';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared';\nimport { WordsListComponent } from './words-list.component';\nimport { WordsListRoutingModule } from './words-list-routing.module';\nimport { SettingsComponent } from '../settings';\n\n@NgModule({\n  declarations: [WordsListComponent, SettingsComponent],\n  imports: [CommonModule, SharedModule, WordsListRoutingModule],\n})\nexport class WordsListModule {}\n"],"sourceRoot":"webpack:///"}